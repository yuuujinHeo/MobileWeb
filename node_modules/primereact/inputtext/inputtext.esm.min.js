import*as t from"react";import{PrimeReactContext as e}from"primereact/api";import{ComponentBase as r,useHandleStyle as n}from"primereact/componentbase";import{KeyFilter as o}from"primereact/keyfilter";import{Tooltip as i}from"primereact/tooltip";import{classNames as l,ObjectUtils as a,mergeProps as p,DomHandler as u}from"primereact/utils";function s(){return s=Object.assign?Object.assign.bind():function(t){for(var e=1;e<arguments.length;e++){var r=arguments[e];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(t[n]=r[n])}return t},s.apply(this,arguments)}function f(t){return f="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},f(t)}function c(t,e){if("object"!==f(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,e||"default");if("object"!==f(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}function y(t){var e=c(t,"string");return"symbol"===f(e)?e:String(e)}var m=r.extend({defaultProps:{__TYPE:"InputText",__parentMetadata:null,keyfilter:null,validateOnly:!1,tooltip:null,tooltipOptions:null,onBeforeInput:null,onInput:null,onKeyDown:null,onPaste:null,children:void 0},css:{classes:{root:function(t){var e=t.props;return l("p-inputtext p-component",{"p-disabled":e.disabled,"p-filled":t.isFilled},e.className)}}}});function b(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function d(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?b(Object(r),!0).forEach((function(e){var n,o,i;n=t,i=r[e],(o=y(o=e))in n?Object.defineProperty(n,o,{value:i,enumerable:!0,configurable:!0,writable:!0}):n[o]=i})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):b(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}var v=t.memo(t.forwardRef((function(r,l){var f=t.useContext(e),c=m.getProps(r,f),y=m.setMetaData(d(d({props:c},c.__parentMetadata),{},{context:{disabled:c.disabled}})),b=y.ptm,v=y.cx;n(m.css.styles,y.isUnstyled,{name:"inputtext",styled:!0});var O=t.useRef(l);t.useEffect((function(){a.combinedRefs(O,l)}),[O,l]);var P=t.useMemo((function(){return a.isNotEmpty(c.value)||a.isNotEmpty(c.defaultValue)}),[c.value,c.defaultValue]),g=a.isNotEmpty(c.tooltip),j=p({className:v("root",{isFilled:P}),onBeforeInput:function(t){c.onBeforeInput&&c.onBeforeInput(t),c.keyfilter&&o.onBeforeInput(t,c.keyfilter,c.validateOnly)},onInput:function(t){var e=t.target,r=!0;c.keyfilter&&c.validateOnly&&(r=o.validate(t,c.keyfilter)),c.onInput&&c.onInput(t,r),a.isNotEmpty(e.value)?u.addClass(e,"p-filled"):u.removeClass(e,"p-filled")},onKeyDown:function(t){c.onKeyDown&&c.onKeyDown(t),c.keyfilter&&o.onKeyPress(t,c.keyfilter,c.validateOnly)},onPaste:function(t){c.onPaste&&c.onPaste(t),c.keyfilter&&o.onPaste(t,c.keyfilter,c.validateOnly)}},m.getOtherProps(c),b("root"));return t.createElement(t.Fragment,null,t.createElement("input",s({ref:O},j)),g&&t.createElement(i,s({target:O,content:c.tooltip},c.tooltipOptions,{pt:b("tooltip")})))})));v.displayName="InputText";export{v as InputText};
